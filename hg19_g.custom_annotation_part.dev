reference=/gpfs/work/SIGU_Tarta18_0/db/reference/ucsc.hg19.fasta
dbSNP_file=/gpfs/work/SIGU_Tarta18_0/db/snp/dbsnp_150_hg19.vcf.gz
dbscSNV=/gpfs/work/SIGU_Tarta18_0/db/dbNSFP3.0/dbscSNV1.1.txt.gz
dbNSFP=/gpfs/work/SIGU_Tarta18_0/db/dbNSFP3.5/dbNSFP3.5.hg19.sorted.txt.gz
CpG_islands=/gpfs/work/SIGU_Tarta18_0/db/UCSC_tables/CpG_islands_UCSC.bed
repeatMasker=/gpfs/work/SIGU_Tarta18_0/db/UCSC_tables/repeatMasker_UCSC.bed
segmentDups=/gpfs/work/SIGU_Tarta18_0/db/UCSC_tables/segmentDups_UCSC.bed
TandemRep=/gpfs/work/SIGU_Tarta18_0/db/UCSC_tables/simpleTandemRep_UCSC.bed
SNPEFF_HOME=/gpfs/work/SIGU_Tarta18_0/NGS_tools/snpEff4.3/
ACMG=/gpfs/work/SIGU_Tarta18_0/db/ACMG_RefGene.txt
DDG2P=/gpfs/work/SIGU_Tarta18_0/db/DDG2P_RefGene.txt
Mendeliome=/gpfs/work/SIGU_Tarta18_0/db/Mendeliome_RefGene.txt
Intervar=/gpfs/work/SIGU_Tarta18_0/NGS_tools/InterVar-2.0.1/Intervar.py
MACARON=/gpfs/work/SIGU_Tarta18_0/NGS_tools/MACARON_GenMed/MACARON_v0.3.py

if [ $phasing == "y" ]
then
	flag=_phased
else
	flag=
fi

time1=$( date "+%s" )

# Lancio Intervar, lo devo lanciare nella dir del config.ini, altrimenti non funziona
cp /gpfs/work/SIGU_Tarta18_0/NGS_tools/InterVar-2.0.1/config.ini $outdir
cd $outdir
$Intervar -b hg19 -i $vcfinput -o $outdir$ID >$outdir$ID"_custAnnot_log" 2>&1 &

#Lancio Macaron per riannotare in maniera più accurata i MNPs (clusters di SNP adiacenti)
python $MACARON -i $vcfinput -o $outdir$ID"_macaron_out.txt" -d $outdir -f dbNSFP_M-CAP_score,dbNSFP_M-CAP_pred,dbNSFP_REVEL_score,dbNSFP_CADD_phred,dbNSFP_DANN_score,dbNSFP_fathmm-MKL_coding_pred,dbNSFP_gnomAD_exomes_AF,dbNSFP_gnomAD_exomes_AFR_AF,dbNSFP_gnomAD_exomes_AMR_AF,dbNSFP_gnomAD_exomes_ASJ_AF,dbNSFP_gnomAD_exomes_EAS_AF,dbNSFP_gnomAD_exomes_FIN_AF,dbNSFP_gnomAD_exomes_NFE_AF,dbNSFP_gnomAD_exomes_SAS_AF,dbNSFP_gnomAD_exomes_OTH_AF,dbNSFP_gnomAD_genomes_AF,dbNSFP_gnomAD_genomes_AFR_AF,dbNSFP_gnomAD_genomes_AMR_AF,dbNSFP_gnomAD_genomes_ASJ_AF,dbNSFP_gnomAD_genomes_EAS_AF,dbNSFP_gnomAD_genomes_FIN_AF,dbNSFP_gnomAD_genomes_NFE_AF,dbNSFP_gnomAD_genomes_OTH_AF,dbNSFP_clinvar_clnsig,dbNSFP_clinvar_trait,dbNSFP_clinvar_golden_stars > $outdir$ID"_macaron_log" 2> $outdir$ID"_macaron_log" &

# con SnpSift annotate riempo il campo ID con il dbSNP e la frequenza (CAF)
java -Xmx64g -jar $SNPEFF_HOME"SnpSift.jar" annotate -id $dbSNP_file $vcfinput > $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.dbSNP.vcf" 2>> $outdir$ID"_ANNOT_log"

# annoto con le annotazioni custom mediante snpEff
# attenzione SnpEff oltre alle CUSTOM annotations UCSC aggiunge anche l'effetto!!!
# tolgo l'opzione -o gatk, in questo caso, così ho l'annotazione di snpEff completa
# qui aggiungiamo l'annotazione nel formato snpEff completo ANN=(*), in modo
# che poi possiamo avere anche gli effetti secondari
# includo splice site nella finestra standard +-2 nt
# NB le annotazioni custom non vengono aggiunte nel formato -o GATK se ci sono
# più effetti diversi sulla stessa variante
java -Xmx64G -jar $SNPEFF_HOME"snpEff.jar" -v hg19 -i vcf -noStats -t -c $SNPEFF_HOME"snpEff.config" -interval $CpG_islands -interval $repeatMasker -interval $segmentDups -interval $TandemRep $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.dbSNP.vcf" > $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot.vcf"  2>> $outdir$ID"_ANNOT_log"
# aggiungo i campi custom snpEff nell'header per attenersi strettamente allo standard vcf
#python /gpfs/work/SIGU_Tarta18_0/NGS_tools/customSnpEffVcfFixer.py $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot.vcf"
# rinomino l'output con l'header fixed
#mv $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_fix.vcf" $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot.vcf"

# estraggo il genename e vari effetti dal campo ANN=(*) di snpEFF perché quando ci sono più effetti (es. SPLICE_SITE+INTRON) manca il campo SNPEFF_GENE_NAME
python /gpfs/work/SIGU_Tarta18_0/NGS_tools/genenameEffFromSnpEff_4.3.py $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot.vcf" 2>> $outdir$ID"_ANNOT_log"

# rinomino l'output con il nome file precedente
mv $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot.genenameEff.vcf" $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot.vcf"

# Annotazione di snpEff con dbNSFP, con -f seleziono i campi da inserire
java -Xmx64g -jar $SNPEFF_HOME"SnpSift.jar" dbnsfp -db $dbNSFP -f Ancestral_allele,Ensembl_geneid,Ensembl_transcriptid,aapos,SIFT_pred,Polyphen2_HDIV_pred,Polyphen2_HVAR_pred,MetaSVM_score,MetaLR_score,M-CAP_score,M-CAP_pred,REVEL_score,CADD_phred,DANN_score,fathmm-MKL_coding_pred,Eigen_coding_or_noncoding,Eigen-PC-phred,integrated_fitCons_score,integrated_confidence_value,clinvar_clnsig,clinvar_trait,clinvar_golden_stars $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot.vcf" > $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.vcf" 2>> $outdir$ID"_ANNOT_log"


# annoto anche gli INDELS con le frequenze di gnomAD_exomes: devo usare WGSA perche' dbNSFP annota solo gli SNP
# viene lanciata due volte la stessa javaclass di wgsa, una volta per snp un'altra per indel, il nome del file output è lo stesso quindi lo rinomino
# prima devo lasciare solo l'ultima riga dell'header, altrimenti WGSA non funziona
grep --text ^#CHROM $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.vcf" > $outdir$ID"_WGSA_header"
grep --text -v ^# $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.vcf" > $outdir$ID"_WGSA_body"
cat $outdir$ID"_WGSA_header" $outdir$ID"_WGSA_body" > $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3_WGSAfix.vcf"

/galileo/home/userexternal/spizzi00/jre1.7.0_79-linux-x64/java-linux-x64/bin/java -cp /gpfs/work/SIGU_Tarta18_0/NGS_tools/WGSA_workflow/javaclass/ add_hg19_gnomAD_exomes_commandline $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3_WGSAfix.vcf" true 1 2 4 5 snp "/gpfs/work/SIGU_Tarta18_0/NGS_tools/WGSA_workflow/gnomAD/" 2>> $outdir$ID"_ANNOT_log"

grep --text -v "	\.	\.	\."$ $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3_WGSAfix.vcf.addgnomAD_exomes" > $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3_WGSAfix.vcf.addgnomAD_exomes_snp"

rm -f $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3_WGSAfix.vcf.addgnomAD_exomes"

/galileo/home/userexternal/spizzi00/jre1.7.0_79-linux-x64/java-linux-x64/bin/java -cp /gpfs/work/SIGU_Tarta18_0/NGS_tools/WGSA_workflow/javaclass/ add_hg19_gnomAD_exomes_commandline $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3_WGSAfix.vcf" true 1 2 4 5 indel "/gpfs/work/SIGU_Tarta18_0/NGS_tools/WGSA_workflow/gnomAD/" 2>> $outdir$ID"_ANNOT_log"

grep --text -v "	\.	\.	\."$ $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3_WGSAfix.vcf.addgnomAD_exomes" | grep --text -v "#CHROM" > $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3_WGSAfix.vcf.addgnomAD_exomes_indel"

cat $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3_WGSAfix.vcf.addgnomAD_exomes_snp" $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3_WGSAfix.vcf.addgnomAD_exomes_indel" > $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3_WGSAfix.vcf.addgnomAD_exomes_snp_indel"

python /gpfs/work/SIGU_Tarta18_0/NGS_tools/gnomAD_wgsa_annotator.py $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.vcf" $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3_WGSAfix.vcf.addgnomAD_exomes_snp_indel" 2>> $outdir$ID"_ANNOT_log"

mv $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3_gnomAD.vcf" $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.vcf"
rm $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3_WGSAfix.vcf.addgnomAD_exome"*

rm -f $outdir$ID"_WGSA_header" $outdir$ID"_WGSA_body" $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3_WGSAfix.vcf"

# Annotazione di snpEff con dbscSNV, con -f seleziono i campi da inserire:
# al momento non funziona, con l'hg38
#java -Xmx64g -jar /gpfs/work/SIGU_Tarta18_0/NGS_tools/snpEff4.3/SnpSift.jar dbnsfp -db $dbscSNV -f RefSeq_id_c.change_p.change,Ensembl_id_c.change_p.change,RefSeq_functional_consequence,Ensembl_functional_consequence,ada_score,rf_score $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.vcf" > $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3_ss.vcf" 2>> $outdir$ID"_ANNOT_log"

# Annotazione dell'ouput di MACARON con i dati di dbNSFP3.5_gene
/gpfs/work/SIGU_Tarta18_0/NGS_tools/dbNSFP35_geneAnnotator_macaron.py $outdir$ID"_macaron_out.txt" 
sed 's/dbNSFP_//g;s/FUNCTION\: //g;s/DISEASE\: //g;s/\tNA/\t\./g' $outdir$ID"_macaron_out_dbNSFP3_gene.tsv" > $outdir$ID"_macaron_annot.tsv"

# Annotazione del vcf con i dati dbNSFP3.5_gene di dati omim, pathways etc
python /gpfs/work/SIGU_Tarta18_0/NGS_tools/dbNSFP35_geneAnnotator.py $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.vcf" 1>> $outdir$ID"_custAnnot_log" 2>&1 || { echo "dbNSFP35_geneAnnotator.py failed!"; exit 1; }
sed -i 's/\,;/;/g' $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene.vcf"
# Eliminiamo "Note=" dal campo Disease_description.
sed -i 's/Note=//g' $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene.vcf"
# Sostitutisco gli spazi con "_" nel vcf per rispettare lo standard vcf
sed -i 's/ /_/g' $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene.vcf"

# annotazione del VCF con i dati di miRBASE
#/gpfs/work/SIGU_Tarta18_0/NGS_tools/run_annomir /gpfs/work/SIGU_Tarta18_0/db/mirbase/hsa_hg19_v20_mod.gff3 $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene.vcf" 1>> $outdir$ID"_custAnnot_log" 2>&1


# annoto gli indels con il CADD score (v.1.3)
# prima lo facevamo solo sugli INDELs, ora lo facciamo su tutte le varianti del vcf, completezza

#### estraggo solo gli INDELs dal vcf
####vcftools --vcf $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP_gene.vcf" --keep-only-indels --recode --out $outdir$ID"_raw_only_indels"
#### lo script del CADD funziona solo se il vcf non ha "chr" come inizio riga ed e' gzippato
####sed -i 's/^chr//g' $outdir$ID"_raw_only_indels.recode.vcf"
####gzip $outdir$ID"_raw_only_indels.recode.vcf"

java -jar $SNPEFF_HOME"SnpSift.jar" splitChr $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene.vcf" 2>> $outdir$ID"_ANNOT_log"

for i in {1..22} X Y; do
        sed 's/^chr//g' $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene.chr"$i".vcf" | gzip > $outdir$ID"_tmp2CADD_"$i".vcf.gz"
done
wait

# ottengo i CADD scores
for j in {1..22} X Y; do
	/gpfs/work/SIGU_Tarta18_0/NGS_tools/CADD_v1.3/bin/score_galileo.sh $outdir$ID"_tmp2CADD_"$j".vcf.gz" $outdir$ID"_raw_SNP_indels.CADD_scored_"$j".tsv.gz" &
done
wait

for z in {1..22} X Y; do
	cat $outdir$ID"_raw_SNP_indels.CADD_scored_"$z".tsv.gz" >> $outdir$ID"_raw_SNP_indels.CADD_scored.tsv.gz"
done

# aggiungo i CADD degli INDELs al campo INFO del nostro file vcf
/gpfs/work/SIGU_Tarta18_0/NGS_tools/addCadd2vcf.py $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene.vcf" $outdir$ID"_raw_SNP_indels.CADD_scored.tsv.gz"

rm -f $outdir$ID"_tmp2CADD"*".vcf"*
rm -f $outdir$ID"_raw_SNP_indels.CADD_scored"*".tsv.gz"*
rm -f $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene.chr"*".vcf"



if [ -s $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered.g_spidex_output.txt" ]; then
	python /gpfs/work/SIGU_Tarta18_0/NGS_tools/spidex_annotator.py $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene_cadd.vcf" $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered.g_spidex_output.txt" >> $outdir$ID"_custAnnot_log" 2>&1
	spid=_spidex
else
	spid=
fi

#Annoto l'esistenza del gene nella liste ACMG, DDG2P, Mendeliome
/gpfs/work/SIGU_Tarta18_0/NGS_tools/ExistingGenesAnnotator.py $ACMG $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene_cadd"$spid".vcf" ACMG >> $outdir$ID"_custAnnot_log" 2>&1
/gpfs/work/SIGU_Tarta18_0/NGS_tools/ExistingGenesAnnotator.py $DDG2P $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene_cadd"$spid"_ACMG.vcf" DDG2P >> $outdir$ID"_custAnnot_log" 2>&1
/gpfs/work/SIGU_Tarta18_0/NGS_tools/ExistingGenesAnnotator.py $Mendeliome $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene_cadd"$spid"_ACMG_DDG2P.vcf" Mendel >> $outdir$ID"_custAnnot_log" 2>&1

#annoto fenotipo HGMD (spizzi00)
java -Xmx64g -jar $SNPEFF_HOME"SnpSift.jar" annotate -info PHEN /gpfs/work/SIGU_Tarta18_0/db/HGMD_PRO_latest_hg19.vcf.gz $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene_cadd"$spid"_ACMG_DDG2P_Mendel.vcf" > $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene_cadd"$spid"_ACMG_DDG2P_Mendel_HGMD.vcf" 2>> $outdir$ID"_ANNOT_log"

mv $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene_cadd"$spid"_ACMG_DDG2P_Mendel_HGMD.vcf" $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene_cadd"$spid"_ACMG_DDG2P_Mendel.vcf"

# Annoto l'interpretazione clinica di Intervar 
python /gpfs/work/SIGU_Tarta18_0/NGS_tools/intervar_annotator.py $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene_cadd"$spid"_ACMG_DDG2P_Mendel.vcf" $outdir$ID".hg19_multianno.txt.intervar" 1>> $outdir$ID"_custAnnot_log" 2>&1

# annoto ricorrenza del singolo vcf
/gpfs/work/SIGU_Tarta18_0/NGS_tools/run_varDBannotator $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene_cadd"$spid"_ACMG_DDG2P_Mendel_intervar.vcf" 1>> $outdir$ID"_custAnnot_log" 2>&1

# comprimo tutti i vcf di output 
gzip -f $outdir$ID"_raw"*".vcf"

if [ $somatic == "y" ]; then

        # con SnpSift annotate riempo il campo ID con il dbSNP e la frequenza (CAF)
        java -Xmx64g -jar $SNPEFF_HOME"SnpSift.jar" annotate -id $dbSNP_file $outdir$ID"_muTect2_raw_snps-indels.vcf" > $outdir$ID"_muTect2_raw_snps-indels"$flag".g.dbSNP.vcf" 2>> $outdir$ID"_ANNOT_log"

        # annoto con le annotazioni custom mediante snpEff
        java -Xmx64G -jar $SNPEFF_HOME"snpEff.jar" -v hg19 -i vcf -noStats -t -c $SNPEFF_HOME"snpEff.config" -interval $CpG_islands -interval $repeatMasker -interval $segmentDups -interval $TandemRep $outdir$ID"_muTect2_raw_snps-indels"$flag".g.dbSNP.vcf" > $outdir$ID"_muTect2_raw_snps-indels"$flag".g.SnpEff_UCSCAnnot.vcf"  2>> $outdir$ID"_ANNOT_log"

        # estraggo il genename e vari effetti dal campo ANN=(*) di snpEFF perché quando ci sono più effetti (es. SPLICE_SITE+INTRON) manca il campo SNPEFF_GENE_NAME
        python /gpfs/work/SIGU_Tarta18_0/NGS_tools/genenameEffFromSnpEff_4.3.py $outdir$ID"_muTect2_raw_snps-indels"$flag".g.SnpEff_UCSCAnnot.vcf" 2>> $outdir$ID"_ANNOT_log"

        # rinomino l'output con il nome file precedente
        mv $outdir$ID"_muTect2_raw_snps-indels"$flag".g.SnpEff_UCSCAnnot.genenameEff.vcf" $outdir$ID"_muTect2_raw_snps-indels"$flag".g.SnpEff_UCSCAnnot.vcf"

        # Annotazione di snpEff con dbNSFP, con -f seleziono i campi da inserire
        java -Xmx64g -jar $SNPEFF_HOME"SnpSift.jar" dbnsfp -db $dbNSFP -f Ancestral_allele,Ensembl_geneid,Ensembl_transcriptid,aapos,SIFT_pred,Polyphen2_HDIV_pred,Polyphen2_HVAR_pred,MetaSVM_score,MetaLR_score,M-CAP_score,M-CAP_pred,REVEL_score,CADD_phred,DANN_score,fathmm-MKL_coding_pred,Eigen_coding_or_noncoding,Eigen-PC-phred,integrated_fitCons_score,integrated_confidence_value,gnomAD_exomes_AF,gnomAD_exomes_AFR_AF,gnomAD_exomes_AMR_AF,gnomAD_exomes_ASJ_AF,gnomAD_exomes_EAS_AF,gnomAD_exomes_FIN_AF,gnomAD_exomes_NFE_AF,gnomAD_exomes_SAS_AF,gnomAD_exomes_OTH_AF,gnomAD_genomes_AF,gnomAD_genomes_AFR_AF,gnomAD_genomes_AMR_AF,gnomAD_genomes_ASJ_AF,gnomAD_genomes_EAS_AF,gnomAD_genomes_FIN_AF,gnomAD_genomes_NFE_AF,gnomAD_genomes_OTH_AF,clinvar_clnsig,clinvar_trait,clinvar_golden_stars $outdir$ID"_muTect2_raw_snps-indels"$flag".g.SnpEff_UCSCAnnot.vcf" > $outdir$ID"_muTect2_raw_snps-indels"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.vcf" 2>> $outdir$ID"_ANNOT_log"

        # Annotazione del vcf con i dati dbNSFP3.5_gene di dati omim, pathways etc
        python /gpfs/work/SIGU_Tarta18_0/NGS_tools/dbNSFP35_geneAnnotator.py $outdir$ID"_muTect2_raw_snps-indels"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.vcf" 1>> $outdir$ID"_custAnnot_log" 2>&1 || { echo "dbNSFP35_geneAnnotator.py failed!"; exit 1; }
        sed -i 's/\,;/;/g' $outdir$ID"_muTect2_raw_snps-indels"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene.vcf"
        # Eliminiamo "Note=" dal campo Disease_description.
        sed -i 's/Note=//g' $outdir$ID"_muTect2_raw_snps-indels"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene.vcf"
        # Sostitutisco gli spazi con "_" nel vcf per rispettare lo standard vcf
        sed -i 's/ /_/g' $outdir$ID"_muTect2_raw_snps-indels"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene.vcf"

        # annotazione del VCF con i dati di miRBASE
        #/gpfs/work/SIGU_Tarta18_0/NGS_tools/run_annomir /gpfs/work/SIGU_Tarta18_0/db/mirbase/hsa_hg19_v20_mod.gff3 $outdir$ID"_muTect2_raw_snps-indels"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene.vcf" 1>> $outdir$ID"_custAnnot_log" 2>&1
	# lo script del CADD funziona solo se il vcf non ha "chr" come inizio riga ed e' gzippato
	sed 's/^chr//g' $outdir$ID"_muTect2_raw_snps-indels"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene.vcf" | gzip > $outdir$ID"_mt2_tmp2CADD.vcf.gz"

	zgrep ^# $outdir$ID"_mt2_tmp2CADD.vcf.gz" > $outdir$ID"_mt2_tmp2CADD.header"
	zgrep -v ^# $outdir$ID"_mt2_tmp2CADD.vcf.gz" > $outdir$ID"_mt2_tmp2CADD.body"

	for i in {1..22} X Y; do grep --text ^$i"	" $outdir$ID"_mt2_tmp2CADD.body" > $outdir$ID"_mt2_tmp2CADD.body."$i; done

	for i in {1..22} X Y; do cat $outdir$ID"_mt2_tmp2CADD.header" $outdir$ID"_mt2_tmp2CADD.body."$i | gzip > $outdir$ID"_mt2_tmp2CADD."$i".vcf.gz"; done

	for i in {1..22} X Y; do
		/gss/gss_work/DRES_FoRWArDS/CADD_v1.3/bin/score_galileo.sh $outdir$ID"_mt2_tmp2CADD."$i".vcf.gz" $outdir$ID"_raw_SNP_indels.CADD_scored"$i".tsv.gz"
		zgrep -v ^# $outdir$ID"_raw_SNP_indels.CADD_scored"$i".tsv.gz" >> $outdir$ID"_raw_SNP_indels.CADD_scored.tsv"
	done
	
	for i in {1..22} X Y; do rm $outdir$ID"_mt2_tmp2CADD.body."$i $outdir$ID"_mt2_tmp2CADD."$i".vcf.gz" $outdir$ID"_raw_SNP_indels.CADD_scored"$i".tsv.gz"; done

	# aggiungo i CADD degli INDELs al campo INFO del nostro file vcf
        /gpfs/work/SIGU_Tarta18_0/NGS_tools/addCadd2vcf.py $outdir$ID"_muTect2_raw_snps-indels"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene.vcf" $outdir$ID"_raw_SNP_indels.CADD_scored.tsv"

        if [ -s $outdir$ID"_muTect2_raw_snps-indels_spidex_output.txt" ]; then
                python /gpfs/work/SIGU_Tarta18_0/NGS_tools/spidex_annotator.py $outdir$ID"_raw_snps-indels_HapCall_genotype_filtered"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene_cadd.vcf" $outdir$ID"_muTect2_raw_snps-indels_spidex_output.txt" >> $outdir$ID"_custAnnot_log" 2>&1
                spid=_spidex
                else
                     spid=
        fi

	#Annoto l'esistenza del gene nella liste ACMG, DDG2P, Mendeliome
	/gpfs/work/SIGU_Tarta18_0/NGS_tools/ExistingGenesAnnotator.py $ACMG $outdir$ID"_muTect2_raw_snps-indels"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene_cadd"$spid".vcf" ACMG
        /gpfs/work/SIGU_Tarta18_0/NGS_tools/ExistingGenesAnnotator.py $DDG2P $outdir$ID"_muTect2_raw_snps-indels"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene_cadd"$spid"_ACMG.vcf" DDG2P
        /gpfs/work/SIGU_Tarta18_0/NGS_tools/ExistingGenesAnnotator.py $Mendeliome $outdir$ID"_muTect2_raw_snps-indels"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene_cadd"$spid"_ACMG_DDG2P.vcf" Mendel

	# annoto ricorrenza del singolo vcf
	/gpfs/work/SIGU_Tarta18_0/NGS_tools/creaDB_affected/run_Affected_varDBannotator $outdir$ID"_muTect2_raw_snps-indels"$flag".g.SnpEff_UCSCAnnot_dbNSFP3.dbNSFP3_gene_cadd"$spid"_ACMG_DDG2P_Mendel.vcf" 1>> $outdir$ID"_custAnnot_log" 2>&1

	# comprimo tutti i vcf di output 
        gzip -f $outdir$ID"_muTect2_raw"*".vcf"

fi

time2=$( date "+%s" )
echo [Total time] $((($time2 - $time1)/60)) min >> $outdir$ID"_ANNOT_log"
